server:
  port: 8010
spring:
  application:
    # 指定注册到eureka server上的服务名称
    name: microserviceConsumerMovie
  jpa:
    # 让hibernate打印执行的SQL
    show-sql: true
logging:
  level:
    com.pcx.cloud.study.feign.UserFeignClient: debug

#    Feign配置自定义【通用配置】
feign:
#  对请求或响应进行压缩
  compression:
    request:
      enabled: true
      mime-types: application/json
      min-request-size: 2048
    response:
      enabled: true
      mime-types: application/json
      min-request-size: 2048
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
#         NONE【性能最佳，适用于生产】：不记录任何日志（默认值）。
#         BASIC【适用于生产环境追踪问题】：仅记录请求方法、URL、响应状态代码以及执行时间。
#         HEADERS：记录BASIC级别的基础上，记录请求和响应的header。
#         FULL【比较适用于开发及测试环境定位问题】：记录请求和响应的header、body和元数据。
        loggerLevel: full
        #优先级 默认使用配置
    default-to-properties: true
    #默认Feign是不启用Hystrix的，需要添加如下配置启用Hystrix，这样所有的Feign Client都会受到Hystrix保护！
  hystrix:
    enabled: true

#健康检查
management:
  endpoints:
    web:
      exposure:
        # 开放所有监控端点
        include: 'hystrix.stream'
  endpoint:
    health:
      # 是否展示健康检查详情
      show-details: always


eureka:
  client:
    # false表示不向注册中心注册自己
    register-with-eureka: true
    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    fetch-registry: true
    service-url:
      # 指定eureka server通信地址，注意/eureka/小尾巴不能少
      defaultZone: http://admin:123123@eureka1:8001/eureka/,http://admin:123123@eureka2:8002/eureka/,http://admin:123123@eureka3:8003/eureka/

    # defaultZone: http://node1:8761/eureka/,http://node2:8762/eureka/
  instance:
    # 是否注册IP到eureka server，如不指定或设为false，那就会注册主机名到eureka server
    prefer-ip-address: true
# 配置 Ribbon 负载均衡调度规则
microserviceProviderUser:
  ribbon:
    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #轮调
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机分配
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
#Ribbon配置饥饿加载 解决Feign/Ribbon第一次请求失败的问题
ribbon:
  eager-load:
    enabled: true
    clients: microserviceProviderUser
